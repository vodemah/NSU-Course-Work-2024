# –§–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ñ–∏–ª—å—Ç—Ä–∞–º–∏)

import json
import random

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from generating import generator
import kb
import states

router = Router()  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

author = None
topic = None
file_for_analyzing = None
lexicon = None


@router.message(Command(commands='start'))
async def start_handler(message: Message):
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞ /start
    await message.answer('‚ù§Ô∏è–ü—Ä–∏–≤–µ—Ç, {name}, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ-—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è '
                         '–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –ø–æ—ç—Ç–æ–≤!'
                         .format(name=message.from_user.full_name), reply_markup=kb.menu)


@router.message(Command(commands='menu'))
async def menu(message: Message, state: FSMContext):
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞ /menu
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–≤–æ–µ–π –ø–µ—Ä—Å–æ–Ω–æ–π!', reply_markup=kb.menu)
    await state.clear()


@router.message(Command(commands='cancel'),
                StateFilter(states.default_state))
async def process_cancel_command(message: Message):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ–æ–±—â–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await message.answer(
        text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—ã –≤–Ω–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
    )


@router.message(Command(commands='cancel'),
                ~StateFilter(states.default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
    # –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await message.answer(
        text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
             '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


@router.message(Command(commands='info'))
async def get_information(message: Message):
    # –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
    await message.answer(
        text='–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ @vodemah.\n\n'
             '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –µ–≥–æ –∞–≤—Ç–æ—Ä—É'
    )


@router.callback_query(F.data == 'generate_verse',
                       StateFilter(states.default_state))
async def choose_author(callback: CallbackQuery, state: FSMContext):
    # –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:', reply_markup=kb.authors_table)
    await state.set_state(states.FSMGenerateVerses.choose_author_of_example)


@router.callback_query(F.data.in_(kb.authors_data.keys()),
                       StateFilter(states.FSMGenerateVerses.choose_author_of_example))
async def choose_topic(callback: CallbackQuery, state: FSMContext):
    # –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choose_author_of_example
    global author
    author = callback.data
    await callback.message.edit_text(
        f'üçÉ–ê–≤—Ç–æ—Ä: {author}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –∑–∞ –æ—Å–Ω–æ–≤—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:',
        reply_markup=kb.topics_table_generating(author)
    )
    await state.set_state(states.FSMGenerateVerses.choose_topic_of_example)


@router.callback_query(StateFilter(states.FSMGenerateVerses.choose_topic_of_example))
async def get_topic(callback: CallbackQuery, state: FSMContext):
    # –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è-–ø—Ä–∏–º–µ—Ä–∞
    global topic
    topic = callback.data
    await callback.message.edit_text('–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å–ª—É–∂–∏—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–±—Ä–∞–Ω–æ.\n\n'
                                     f'–ê–≤—Ç–æ—Ä: {author}\n–¢–µ–º–∞: {topic}\n')
    author_id = int(str(kb.connection.execute('SELECT author_id FROM Authors '
                                              'WHERE author_name = (?)',
                                              (f'{author}',)).fetchone())[1:-2])
    print(author_id)
    topic_id = int(str(kb.connection.execute('SELECT subject_id FROM Subjects '
                                             'WHERE subject = (?) AND author_id = (?)',
                                             (f'{topic}', author_id)).fetchone())[1:-2])
    print(topic_id)
    all_verses_of_topic = kb.connection.execute('SELECT file_name FROM Verses '
                                                'WHERE author_id = (?) AND subject_id = (?)',
                                                (author_id, topic_id)).fetchall()
    print(all_verses_of_topic)
    global file_for_analyzing
    file_for_analyzing = str(random.choice(all_verses_of_topic))[2:-3]
    verse_name = str(kb.connection.execute('SELECT verse_name FROM Verses '
                                           'WHERE file_name = (?)',
                                           (f'{file_for_analyzing}',)).fetchone())[2:-3]
    verse_name_for_user = verse_name.replace('\\xa0', ' ')
    await callback.message.edit_text('–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å–ª—É–∂–∏—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–±—Ä–∞–Ω–æ.\n\n'
                                     f'–ê–≤—Ç–æ—Ä: {author}\n–¢–µ–º–∞: {topic}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {verse_name_for_user}')
    with open(file_for_analyzing, 'r', encoding='utf-8') as f:
        data = f.read()
    if len(data) <= 4096:
        await callback.message.answer(data)
    else:
        parts = len(data) // 4096
        for part in range(parts):
            left, right = 4096 * part, 4096 * (part + 1)
            await callback.message.answer(data[left:right])
    await callback.message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞, –ª–µ–∫—Å–∏–∫–æ–Ω –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.',
                                  reply_markup=kb.authors_table)
    await state.set_state(states.FSMGenerateVerses.choose_author_of_lexicon)


@router.callback_query(F.data.in_(kb.authors_data.keys()),
                       StateFilter(states.FSMGenerateVerses.choose_author_of_lexicon))
async def get_topic(callback: CallbackQuery, state: FSMContext):
    # –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choose_author_of_example.
    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤–∞–∂–Ω–µ–π—à–∏–µ –º–µ—Ç–æ–¥—ã analyzing –∏ replacing –∏–∑ –º–æ–¥—É–ª—è generating
    # –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Å–µ–≤–¥–æ-—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    global lexicon
    lexicon = callback.data
    await callback.message.edit_text('–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–µ–∫—Å–∏–∫–æ–Ω –∞–≤—Ç–æ—Ä–∞ ' + lexicon)

    with open('_'.join(lexicon.split()) + '_data.json') as file:
        corpus = json.load(file)

    verse_lines = generator.analyzing(file_for_analyzing)

    final_result = ''
    for line in range(len(verse_lines)):
        new_line = generator.replacing(line_array=verse_lines[line], morph_dict=corpus)
        final_result += new_line

    if len(final_result) <= 4096:
        await callback.message.answer(final_result)
    else:
        parts = len(final_result) // 4096
        for part in range(parts):
            left, right = 4096 * part, 4096 * (part + 1)
            await callback.message.answer(final_result[left:right])

    await callback.message.answer('–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –≤—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.'
                                  '\n\n–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
    await state.clear()
